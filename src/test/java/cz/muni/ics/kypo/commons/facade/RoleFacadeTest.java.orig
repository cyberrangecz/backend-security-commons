package cz.muni.ics.kypo.commons.facade;

import com.querydsl.core.types.Predicate;
import cz.muni.ics.kypo.commons.facade.api.PageResultResource;
import cz.muni.ics.kypo.commons.facade.api.dto.RoleDTO;
import cz.muni.ics.kypo.commons.facade.exception.CommonsFacadeException;
import cz.muni.ics.kypo.commons.facade.impl.RoleFacadeImpl;
import cz.muni.ics.kypo.commons.facade.mapping.SecurityBeanMappingImpl;
import cz.muni.ics.kypo.commons.facade.mapping.mapstruct.RoleMapperImpl;
import cz.muni.ics.kypo.commons.service.exceptions.CommonsServiceException;
import cz.muni.ics.kypo.commons.facade.interfaces.RoleFacade;
import cz.muni.ics.kypo.commons.persistence.model.IDMGroupRef;
import cz.muni.ics.kypo.commons.persistence.model.Role;
import cz.muni.ics.kypo.commons.service.interfaces.RoleService;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.ArgumentMatchers;
import org.mockito.BDDMockito;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import static org.junit.Assert.assertEquals;
import static org.mockito.BDDMockito.willThrow;

@RunWith(SpringRunner.class)
<<<<<<< HEAD
public class RoleFacadeTest  {
	@Rule
	public ExpectedException thrown = ExpectedException.none();

	private RoleFacade roleFacade;

	@Mock
	private RoleService roleService;

	private Role role1, role2;
	private IDMGroupRef groupRef1;
	private RoleDTO roleDTO;
	private Predicate predicate;
	private Pageable pageable;


	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
		roleFacade = new RoleFacadeImpl(roleService, new RoleMapperImpl());
		role1 = new Role();
		role1.setId(1L);
		role1.setRoleType("ADMINISTRATOR");

		role2 = new Role();
		role2.setId(2L);
		role2.setRoleType("GUEST");

		groupRef1 = new IDMGroupRef();
		groupRef1.setId(1L);
		groupRef1.setIdmGroupId(1L);

		roleDTO = new RoleDTO();
		roleDTO.setId(1L);
		roleDTO.setRoleType("ADMINISTRATOR");

		pageable = PageRequest.of(0, 10);

	}

	@Test
	public void testGetById() {
		BDDMockito.given(roleService.getById(1L)).willReturn(role1);
		RoleDTO rDTO = roleFacade.getById(1L);

		assertEquals(roleDTO.getId(), rDTO.getId());
		assertEquals(roleDTO.getRoleType(), rDTO.getRoleType());
	}

	@Test
	public void testGetByIdWithServiceException() {
		BDDMockito.given(roleService.getById(ArgumentMatchers.anyLong())).willThrow(new CommonsServiceException());
		thrown.expect(CommonsFacadeException.class);
		roleFacade.getById(1L);
	}

	@Test
	public void testGetByRoleType() {
		BDDMockito.given(roleService.getByRoleType("ADMINISTRATOR")).willReturn(role1);
		RoleDTO rDTO = roleFacade.getByRoleType("ADMINISTRATOR");

		assertEquals(roleDTO.getId(), rDTO.getId());
		assertEquals(roleDTO.getRoleType(), rDTO.getRoleType());
	}

	@Test
	public void testGetByRoleTypeWithServiceException() {
		BDDMockito.given(roleService.getByRoleType("ADMINISTRATOR")).willThrow(new CommonsServiceException());
		thrown.expect(CommonsFacadeException.class);
		roleFacade.getByRoleType("ADMINISTRATOR");
	}

	@Test
	public void testGetAllRoles() {
		Page<Role> rolesPage = new PageImpl<Role>(Arrays.asList(role1));
		PageResultResource<RoleDTO> pages = new PageResultResource<>();
		pages.setContent(Arrays.asList(roleDTO));

		BDDMockito.given(roleService.getAllRoles(predicate, pageable)).willReturn(rolesPage);
		PageResultResource<RoleDTO> pageResultResource = roleFacade.getAllRoles(predicate,pageable);

		assertEquals(1, pageResultResource.getContent().size());
		assertEquals(roleDTO, pageResultResource.getContent().get(0));
	}

	@Test
	public void testAssignRoleToGroup() {
		roleFacade.assignRoleToGroup(1L, 1L);
		BDDMockito.then(roleService).should().assignRoleToGroup(1L, 1L);
	}

	@Test
	public void testAssignRoleToGroupWithServiceException() {
		willThrow(CommonsServiceException.class).given(roleService).assignRoleToGroup(1L,1L);
		thrown.expect(CommonsFacadeException.class);
		roleFacade.assignRoleToGroup(1L, 1L);
	}

	@Test
	public void testRemoveRoleFromGroup() {
		roleFacade.removeRoleFromGroup(1L, 1L);
		BDDMockito.then(roleService).should().removeRoleFromGroup(1L, 1L);
	}

	@Test
	public void testRemoveRoleFromGroupWithServiceException() {
		willThrow(CommonsServiceException.class).given(roleService).removeRoleFromGroup(1L,1L);
		thrown.expect(CommonsFacadeException.class);
		roleFacade.removeRoleFromGroup(1L, 1L);
	}


	@Test
	public void testGetRolesOfGroups() {
		BDDMockito.given(roleService.getRolesOfGroups(Arrays.asList(1L, 2L))).willReturn(new HashSet<>(Arrays.asList(role1,role2)));
		Set<RoleDTO> roleDTOS = roleFacade.getRolesOfGroups(Arrays.asList(1L,2L));
		Assert.assertTrue(roleDTOS.contains(roleDTO));
		Assert.assertEquals(2, roleDTOS.size());
	}
=======
public class RoleFacadeTest {
    @Rule
    public ExpectedException thrown = ExpectedException.none();

    private RoleFacade roleFacade;

    @Mock
    private RoleService roleService;

    private Role role1, role2;
    private IDMGroupRef groupRef1;
    private RoleDTO roleDTO;
    private Predicate predicate;
    private Pageable pageable;


    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
        roleFacade = new RoleFacadeImpl(roleService, new SecurityBeanMappingImpl(new ModelMapper()));
        role1 = new Role();
        role1.setId(1L);
        role1.setRoleType("ADMINISTRATOR");

        role2 = new Role();
        role2.setId(2L);
        role2.setRoleType("GUEST");

        groupRef1 = new IDMGroupRef();
        groupRef1.setId(1L);
        groupRef1.setIdmGroupId(1L);

        roleDTO = new RoleDTO();
        roleDTO.setId(1L);
        roleDTO.setRoleType("ADMINISTRATOR");

        pageable = PageRequest.of(0, 10);

    }

    @Test
    public void testGetById() {
        BDDMockito.given(roleService.getById(1L)).willReturn(role1);
        RoleDTO rDTO = roleFacade.getById(1L);

        assertEquals(roleDTO.getId(), rDTO.getId());
        assertEquals(roleDTO.getRoleType(), rDTO.getRoleType());
    }

    @Test
    public void testGetByIdWithServiceException() {
        BDDMockito.given(roleService.getById(ArgumentMatchers.anyLong())).willThrow(new CommonsServiceException());
        thrown.expect(CommonsFacadeException.class);
        roleFacade.getById(1L);
    }

    @Test
    public void testGetByRoleType() {
        BDDMockito.given(roleService.getByRoleType("ADMINISTRATOR")).willReturn(role1);
        RoleDTO rDTO = roleFacade.getByRoleType("ADMINISTRATOR");

        assertEquals(roleDTO.getId(), rDTO.getId());
        assertEquals(roleDTO.getRoleType(), rDTO.getRoleType());
    }

    @Test
    public void testGetByRoleTypeWithServiceException() {
        BDDMockito.given(roleService.getByRoleType("ADMINISTRATOR")).willThrow(new CommonsServiceException());
        thrown.expect(CommonsFacadeException.class);
        roleFacade.getByRoleType("ADMINISTRATOR");
    }

    @Test
    public void testGetAllRoles() {
        Page<Role> rolesPage = new PageImpl<Role>(Arrays.asList(role1));
        PageResultResource<RoleDTO> pages = new PageResultResource<>();
        pages.setContent(Arrays.asList(roleDTO));

        BDDMockito.given(roleService.getAllRoles(predicate, pageable)).willReturn(rolesPage);
        PageResultResource<RoleDTO> pageResultResource = roleFacade.getAllRoles(predicate, pageable);

        assertEquals(1, pageResultResource.getContent().size());
        assertEquals(roleDTO, pageResultResource.getContent().get(0));
    }

    @Test
    public void testAssignRoleToGroup() {
        roleFacade.assignRoleToGroup(1L, 1L);
        BDDMockito.then(roleService).should().assignRoleToGroup(1L, 1L);
    }

    @Test
    public void testAssignRoleToGroupWithServiceException() {
        willThrow(CommonsServiceException.class).given(roleService).assignRoleToGroup(1L, 1L);
        thrown.expect(CommonsFacadeException.class);
        roleFacade.assignRoleToGroup(1L, 1L);
    }

    @Test
    public void testRemoveRoleFromGroup() {
        roleFacade.removeRoleFromGroup(1L, 1L);
        BDDMockito.then(roleService).should().removeRoleFromGroup(1L, 1L);
    }

    @Test
    public void testRemoveRoleFromGroupWithServiceException() {
        willThrow(CommonsServiceException.class).given(roleService).removeRoleFromGroup(1L, 1L);
        thrown.expect(CommonsFacadeException.class);
        roleFacade.removeRoleFromGroup(1L, 1L);
    }


    @Test
    public void testGetRolesOfGroups() {
        BDDMockito.given(roleService.getRolesOfGroups(Arrays.asList(1L, 2L))).willReturn(new HashSet<>(Arrays.asList(role1, role2)));
        Set<RoleDTO> roleDTOS = roleFacade.getRolesOfGroups(Arrays.asList(1L, 2L));
        Assert.assertTrue(roleDTOS.contains(roleDTO));
        Assert.assertEquals(2, roleDTOS.size());
    }
>>>>>>> 0d1adea3a2f93859a93b6eb3e56fbc0840f8653e
}
