# Environment DEV or PROD
### DEV environment does not need kypo2-user-and-group project but assign authority as GUEST by default
spring.profiles.active=DEV 
### If you want try your project with specific roles you can define them by adding:
spring.profiles.dev.role={your role/s}

## Allows you to specify allowed origins for CORS mapping. You could set it as, e.g., http://domain1.com, http://domain2.com, etc. The default value is: *
cors.allowed.origins={CORS allowed origins}

## Allows enable or disable swagger-ui.html page, e.g., true (on production environments it is recommended to set it to false)
swagger.enabled={swagger enabled}

# OpenID Connect OIDC configuration settings for a resource servers configuration
# Add configuration values for your OIDC providers. If you want to run application properly, make sure that all values are in the same order.
# First OIDC provider is used for authorization in swagger page
## OIDC issuers, e.g. MUNI OIDC and another proprietary OIDC authorization server, e.g., https://oidc.muni.cz/oidc/, https://kypo-oidc-idp.cz/oidc/
kypo.idp.4oauth.issuers={OIDC issuer URIs}
## the addresses of authorization servers where the resource service is checking incoming token from a client based on iss field in token, e.g. https://oidc.muni.cz/oidc/introspect, https://kypo-oidc-idp.cz/oidc/introspect
kypo.idp.4oauth.introspectionURIs={URLs to authorization servers introspect endpoint}
## the identification of a resource service using client IDs
kypo.idp.4oauth.resource.clientIds={your client IDs from Self-service protected resource}
## the identification of a resource service using client secrets
kypo.idp.4oauth.resource.clientSecrets={your client secrets from Self-service protected resource}

# OpenID Connection MUNI OIDC configuration settings for a client configuration
## the addresses of authorization servers where the client is getting a token, e.g., https://oidc.muni.cz/oidc/authorize, https://kypo-oidc-idp.cz/oidc/authorize
kypo.idp.4oauth.authorizationURIs={URLs to authorization server authorize endpoint}
## the identification of client using his client IDs
kypo.idp.4oauth.client.clientIds={your client IDs from Self-service client}
## the scopes that authorization servers will provide for a given user, e.g., openid, profile, email
kypo.idp.4oauth.scopes=openid, profile, email

## server ip address, e.g., localhost (127.0.0.1)
server.ipaddress=localhost
## server port for a given service, e.g., 8083
server.port=8083
## server context path (the base url for the service), e.g., /kypo2-rest-training/api/v1
server.servlet.context-path=/kypo2-rest-training/api/v1
## server protocol used for communication, e.g., http or https
server.protocol=https
## microservice name which is used in user management service for identification of this service, e.g. kypo2-training
microservice.name=kypo2-training

## calling user-and-group project, e.g., https://localhost:8084/kypo2-rest-user-and-group/api/v1
user-and-group-server.uri={URI to user-and-group microservice}

# Jackson
spring.jackson.property-naming-strategy=SNAKE_CASE

# HTTPS and CA
## the requirement for ssl, e.g., true
security.require-ssl={ssl requirement}
## the format used for the KeyStore, e.g. PKCS12
server.ssl.key-store-type={the format used for the KeyStore}
## path to KeyStore, e.g., /etc/ssl/kypo2-keystore.p12
server.ssl.key-store={path to KeyStore}
## password used when generate KeyStore , e.g., changeit
server.ssl.key-store-password={password used when generate KeyStore}
## alias of KeyStore, e.g., kypo2-keystore
server.ssl.key-alias={alias of KeyStore}
## path to TrustStore, e.g., default for Java app is in JDK $JAVA_HOME/lib/security/cacerts
server.ssl.trust-store={path to TrustStore}
## password to TrustStore, e.g., default for cacerts is changeit
server.ssl.trust-store-password={password to TrustStore}
## the format used for the TrustStore, e.g, JKS
server.ssl.trust-store-type={the format used for the TrustStore}
