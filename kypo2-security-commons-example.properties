## Allows you to specify allowed origins for CORS mapping. You could set it as, e.g., http://domain1.com, http://domain2.com, etc. The default value is: *
cors.allowed.origins={CORS allowed origins}

## Allows enable or disable swagger-ui.html page, e.g., true (on production environments it is recommended to set it to false)
swagger.enabled={swagger enabled}

# OpenID Connect OIDC configuration settings for a resource servers configuration
# Add configuration values for your OIDC providers. If you want to run application properly, make sure that all values are in the same order.
# First OIDC provider is used for authorization in swagger page
## OIDC issuers, e.g. MUNI OIDC and another proprietary OIDC authorization server, e.g., https://oidc.muni.cz/oidc/, https://kypo-oidc-idp.cz/oidc/
kypo.idp.4oauth.issuers={OIDC issuer URIs}
## the identification of a resource service using client IDs
kypo.idp.4oauth.resource.clientIds={your client IDs from Self-service protected resource}
## the identification of a resource service using client secrets
kypo.idp.4oauth.resource.clientSecrets={your client secrets from Self-service protected resource}

## the scopes that authorization servers will provide for a given user, e.g., openid, profile, email
kypo.idp.4oauth.scopes=openid, profile, email

## server protocol used for communication, e.g., http or https
server.protocol={ microservice protocol }
## server ip address for a given service, e.g., localhost (127.0.0.1)
server.ipaddress={ microservice ip address } 
## server port for a given service, e.g., 8083
server.port={ microservice port }
## server context path (the base url for the service), e.g., /kypo2-rest-training/api/v1
server.servlet.context-path={ microservice context path }
## microservice name which is used in user management service for identification of this service, e.g. kypo2-training
microservice.name={ name of the microservice }

## calling user-and-group project, e.g., https://localhost:8084/kypo2-rest-user-and-group/api/v1
user-and-group-server.uri={URI to user-and-group microservice}

# Jackson
spring.jackson.property-naming-strategy=SNAKE_CASE
